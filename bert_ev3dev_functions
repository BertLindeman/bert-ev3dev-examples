#!/bin/bash -u
# Script_name     : bert_ev3dev_functions
# Author          : Bert Lindeman
# Description     : functions that can be used by more than one bash script related to ev3dev
# Version         : v1.1
# Date            : 2014-09-08
# Usage           : .  /usr/local/bin/bert_ev3dev_functions
# Notes           :
# Copyright       : 2014 Bert Lindeman
# License         : GPL-3.0+
#
#============================================================================
#
# Changelog
# Date     By       Description
#
#
#============================================================================


#
# color codes ascii
# Attribute codes:
# 00=none 01=bold 04=underscore 05=blink 07=reverse 08=concealed

# Text color codes:
# 30=black 31=red 32=green 33=yellow 34=blue 35=magenta 36=cyan 37=white

# Background color codes:
# 40=black 41=red 42=green 43=yellow 44=blue 45=magenta 46=cyan 47=white

  black='\e[0;30m'
  red='\e[0;31m'
  green='\e[0;32m'
  yellow='\e[0;33m'
  blue='\e[0;34m'
  magenta='\e[0;35m'
  cyan='\e[0;36m'
  white='\e[0;37m'

  brblack='\e[1;30m'
  brred='\e[1;31m'
  brgreen='\e[1;32m'
  bryellow='\e[1;33m'
  brblue='\e[1;34m'
  brmagenta='\e[1;35m'
  brcyan='\e[1;36m'
  brwhite='\e[1;37m'

  endColor='\e[0m'
#
findsensorctl () {
#
# function to find which directory structure is used to control "this"
# sensor
#  find which in% sensor is connected to msensor/sensor%
#
# parm1: input port NUMBER
#

  CURSENSOR="???????"
  for d in /sys/class/msensor/sensor*;
  do
    port=`cat $d/port_name`
    if [ "$port" == "in$1" ]; then
      CURSENSOR=${d: -1:1}
      # take the numeric part at the end of the basename:
      CURSENSOR=`basename ${d}`
      CURSENSOR=${CURSENSOR:6} # drop "sensor" from the name
      return
    fi
  done
}

### general things:

listcontains() {
  for word in $1; do
      [[ $word = $2 ]] && return 0
  done
  return 1
}

# Usage           : stringcontains needle haystack
# needle   if missing: empty string
# haystack if missing: empty string
# An empty string contains nothing
stringcontains() {
  substring="${1-""}" 
  string="${2:-""}"    
  if [ -z "$string" ]; then return 1 ; fi
  if [[ "$string" == *"$substring"* ]]; then return 0
  else 					     return 1
  fi
}


### screen manipulations:

#  echo -ne "\033[0;0H"
#  COLUMNS=$(tput cols)
#  printf "%${COLUMNS}s\n"
#  # top and clear rest of the line:
topofscreen() {
  echo -ne "\033[0;0H\033[2K"
}

# parm1 is line   (height) 0 = top
# parm2 is column (width)  0 = left
putcursor() {
  echo -ne "\033[$1;$2f"
}

getxy(){
  # save, clear screen
  # tput smcup

  echo -en "\E[6n";read -sdR CURPOS; CURPOS=${CURPOS#*[}

  # restore
  # tput rmcup

  CURY=`echo "${CURPOS}" | cut -d ";" -f 1`
  CURX=`echo "${CURPOS}" | cut -d ";" -f 2`
}


### ev3 functions:

findmotorctl () {
#
# function to find which directory structure is used to control "this"
# motor
#
# parm1: motor port LETTER
# uppercase parm1:
  parm1=`echo $1 | tr '[:lower:]' '[:upper:]'`
  CURMOTOR="???????"
  SEENPORT=""
  for d in /sys/class/tacho-motor/tacho-motor*/;
  do
    port=`cat $d/port_name`
    SEENPORT="$SEENPORT $port"
    if [ "$port" == "out$parm1" ]; then
      CURMOTOR=${d:0:-1}
      return
    fi
  done
  echo "SEENPORT: $SEENPORT"  
}

OFFred () {
#
# function to switch OFF the red EV3-leds (left and right)
#
  echo none > /sys/class/leds/ev3\:red\:right/trigger
  echo    0 > /sys/class/leds/ev3\:red\:right/brightness
  echo none > /sys/class/leds/ev3\:red\:left/trigger
  echo    0 > /sys/class/leds/ev3\:red\:left/brightness
}

OFFgreen () {
#
# function to switch OFF the green EV3-leds (left and right)
#
  echo none > /sys/class/leds/ev3\:green\:left/trigger
  echo    0 > /sys/class/leds/ev3\:green\:left/brightness
  echo none > /sys/class/leds/ev3\:green\:right/trigger
  echo    0 > /sys/class/leds/ev3\:green\:right/brightness
}

OFFleds () {
#
# function to switch OFF both red and green EV3-leds (left and right)
#
  OFFred
  OFFgreen
}


