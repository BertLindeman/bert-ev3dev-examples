#!/bin/bash -u           
# Script_name     : showleds
# Author          : Bert Lindeman
# Description     : Show values of EV3-leds
# Version         : v1.1  
# Date            : 2014-08-26
# Usage           : ./showleds
# Notes           : No arguments needed or used       
#                   o brightness is only non-zero at the time
#                     that the led indeed *is* giving light.
#                     So a blinking led might show zero or non-zero.
# Copyright       : 2014 Bert Lindeman
# License         : GPL-3.0+
#
#============================================================================
#
# Changelog       :       
# Date     By       Description
# 20140826 BL       o Show delay_on and delay_off if available for 
#                     this led and for it's trigger
#                   o adapt usage clause (not parameters)
#
#============================================================================


#

usageEXIT () {
    echo "$1"
    echo
    echo "USAGE: $0 "
    exit 1
}

  if [ -e /usr/local/bin/asciicolors ]; 
  then .  /usr/local/bin/asciicolors
  else    black='\e[0;30m'
    red='\e[0;31m'
    green='\e[0;32m'
    yellow='\e[0;33m'
    blue='\e[0;34m'
    magenta='\e[0;35m'
    cyan='\e[0;36m'
    white='\e[0;37m'

    brblack='\e[1;30m'
    brred='\e[1;31m'
    brgreen='\e[1;32m'
    bryellow='\e[1;33m'
    brblue='\e[1;34m'
    brmagenta='\e[1;35m'
    brcyan='\e[1;36m'
    brwhite='\e[1;37m'

    endColor='\e[0m'
  fi

declare _A brightnessArr
declare _A triggerArr
declare _A triggerCol
declare _A delayON
declare _A delayOFF

showLEDtrigger () {
 # echo "showing trigger from $1"
 for word in `cat $1` ;
  do
    delim=${word:0:1}${word:${#word}-1:1}
    if [ $delim == "[]" ]; then
      trigger=${word:1:${#word}-2}
      break # do not search further
    else
      trigger=$word  
    fi
  done
  currenttrigger=$trigger 
  if [ $currenttrigger == "none" ]; then triggercol=$white
                                    else triggercol=$brblue
  fi                                   
}

for side in left right ;
do
  for ledcolor in red green ; 
  do
    if [ $ledcolor == "red"  ]; then icol=0  ; else icol=1 ;  fi      
    if [ $side  == "left" ]; then iside=0 ; else iside=1;  fi      
     
    ledbase="/sys/class/leds/ev3:$ledcolor:$side"
    ledbrightness="$ledbase/brightness"
    delay_onpath="$ledbase/delay_on"
    delay_offpath="$ledbase/delay_off"
    ledtriggerpath="$ledbase/trigger"

    brightness=$(echo "`cat $ledbrightness`")
    brightnessArr[$icol$iside]=$brightness
    showLEDtrigger $ledtriggerpath
    triggerArr[$icol$iside]=${currenttrigger:0:40}
    triggerCol[$icol$iside]=$triggercol # ${triggercol}
    if [ -e "$delay_onpath" ];  then  delayON[$icol$iside]=$(echo "`cat $delay_onpath`")
    else                              delayON[$icol$iside]="."
    fi
    if [ -e "$delay_offpath" ]; then delayOFF[$icol$iside]=$(echo "`cat $delay_offpath`")
    else                             delayOFF[$icol$iside]="."
    fi
  done  
done 

# clear

  echo Report:
  # header
  printf "$brwhite%-6s %-11s %10s %8s %8s %-40s$white\n" "color" "Side"        "Brightness" " dly_ON" "dly_OFF" "trigger"
  printf "$brwhite%-6s %-11s %10s %8s %8s %-40s$white\n" "-----" "-----------" "----------" " ------" "-------" "-------"

  for side in left right ;
  do  
    for ledcolor in red green ;
    do      
      if [ $ledcolor == "red"  ]; then icol=0  ; else icol=1 ;  fi      
      if [ $side     == "left" ]; then iside=0 ; else iside=1;  fi      

      curColor=\$br$ledcolor # dereference $ledcolor to get bright colorcode for ledcolor
      
      if [ "$side" == "right" ] ; then
        curside="right"; sidealign=""
      else  
        curside="left" ; sidealign="-"
      fi
      if [ ${brightnessArr[$icol$iside]} == "0" ]; then brightnessCol=$yellow
                                                   else brightnessCol=$green
      fi
      printf `eval echo $curColor`"%-6s $white%$sidealign""11s %10s %8s %8s ${triggerCol[$icol$iside]}%-40s\n" $ledcolor $curside ${brightnessArr[$icol$iside]} ${delayON[$icol$iside]} ${delayOFF[$icol$iside]} ${triggerArr[$icol$iside]} 
    done
  done 
  echo -e " ${endColor} " # back to normal