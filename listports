#!/bin/bash -u
# Script_name     : listports
# Author          : Bert Lindeman
# Description     : List sensors and motors
# Version         : v1.3
# Date            : 2014-12-28
# Usage           : listports
# Notes           : 
# Copyright       : 2014 Bert Lindeman
# License         : GPL-3.0+
#
#============================================================================
#
#
# Changelog        
# Date     By       Description
# 20141104 BL       o prepare for release v1.3
#                   o Take terminal-width into account
# 20141020 BL       o adapt to motor mappings (kernel 3.16.1-6)
#                   o add rcx leds and motors
# 20140928 BL       o Adapt to updates in 
#                       kernel version 3.16.1-3-ev3dev
#                                  and 3.16.1-4-ev3dev
#                   o remove field type_id
#                   o slightly different file names
#                   o motor type -> device_type
#                   o issue 123: force mode to input ports and output ports
# 20141228 BL       o Adapt to updates in 
#                       kernel version 3.16.1-8-ev3dev
#
#============================================================================

. /usr/local/bin/bert_ev3dev_functions


findinport() {
   # look in lego-port sysfs directories to determine which lego-port 
   # is processing the in% port we are looking for (From parameter-1)
   portpath=`grep -i "${1}" /sys/class/lego-port/port*/port_name`
   # results in /sys/class/lego-port/port7/port_name:outD
   # take dirname: bla/bla/port7
   # take basename
   portdir=`dirname ${portpath}`
   legoport=`basename ${portdir}`
   #set +x
}

 haveportsin=""
 haveportsout=""  

# one extra directory level since 3.16.1-8: -maxdepth 3 instead of 2
findstr=`find /sys/devices/platform/legoev3-ports/ -maxdepth 3 -name "in[1234]\:*" `
#
for p in $findstr
do 
  echo -en "\r-"
  basename="`basename $p`" 
  dirname="`dirname $p`"
  
  # split basename before and after ":"
  porttype1="${basename%%:*}"
  porttype2="${p#*:}"
  #
  if [ ${porttype1:0:2} == "in" ]; then
    
    driver_mode="`cat $dirname/mode`"
    driver_status="`cat $dirname/status`" # was state
    inportnumber=${porttype1:2:1}  # in%
    haveportsin="$haveportsin $inportnumber"
    
      Arrindir[$inportnumber]=${dirname}
  Arrindrvmode[$inportnumber]=${driver_mode}
 Arrindrvstate[$inportnumber]=${driver_status}
     Arrinport[$inportnumber]=${porttype1}                #${inportnumber} 
     Arrintype[$inportnumber]=${porttype2}
     Arrinbase[$inportnumber]=${basename}
    # backup path if no better one is found later 
    Arrinctlpath[$inportnumber]=`echo -e "             ${brblue}/sys/devices/platform/legoev3-ports/in$inportnumber/mode${brwhite}"`
   

    pathColor="$green"
    CURSENSOR="*"     # set default so we know if it was unknown
    
    findsensorctl ${inportnumber}
    inlvl1=`echo -e /sys/class/lego-sensor/sensor${CURSENSOR}/`    
    Arrinsensormode[${inportnumber}]=`cat /sys/class/lego-sensor/sensor${CURSENSOR}/mode`
    if [ -r /sys/class/lego-sensor/sensor${CURSENSOR}/fw_version  ]; then
      Arrinfw[${inportnumber}]=`cat /sys/class/lego-sensor/sensor${CURSENSOR}/fw_version`
    else  
      Arrinfw[${inportnumber}]=" "
    fi        
    if [ -r /sys/class/lego-sensor/sensor${CURSENSOR}/poll_ms  ]; then
      Arrinpoll[${inportnumber}]=`cat /sys/class/lego-sensor/sensor${CURSENSOR}/poll_ms 2>/dev/null`  
    else  
      Arrinpoll[${inportnumber}]=" "
    fi        

    # if unknown then red else green:
    if [ "${CURSENSOR:0:1}" == "?"  ]; 
    then  pathColor="$brred" ; 
    else  pathColor="$green" ; 
    fi  
    Arrinctlpath[$inportnumber]=`echo -e ${pathColor}${inlvl1}$brwhite`     
  fi
  echo -en "\r|"
  
done

# 
# findstr=`find /sys/devices/platform/legoev3-ports/ -maxdepth 2 -name "in[1234]\:*" -o  -name "out[ABCD]*" -name "*\:*"`
findstr=`/bin/ls -d /sys/class/tacho-motor/tacho-motor*/ 2>/dev/null` # before kernel 3.16.1-6
if [ $? == 0 ]; then
   findstr=`/bin/ls -d /sys/class/tacho-motor/tacho-motor*/`
else                                                                  # at kernel 3.16.1-6 and later
 if [ $? == 0 ]; then
   findstr=`/bin/ls -d /sys/class/lego-port/port*/out* 2>/dev/null`
 else                                                                  # at kernel 3.16.1-8 and later
   set +e
   findstr=`/bin/ls -d /sys/class/*motor/motor*/    2>/dev/null`
   findled=`/bin/ls -d /sys/class/leds/ev3::out*/   2>/dev/null`
   set -e
 fi  
fi   
set +x
# sofar found 3 motor types:
# /bin/ls -ld /sys/class/dc-motor/motor*/    2>/dev/null
# /bin/ls -ld /sys/class/tacho-motor/motor*/ 2>/dev/null 
# /bin/ls -ld /sys/class/servo-motor/motor*/ 2>/dev/null
#
# should include: /sys/class/leds/ev3::out%

# need to declare the arrays (Otherwise the index e.g. C is reported unbound..)

declare -A Arroutbase=(    [A]=a [B]=b [C]=c [D]=d )
declare -A Arroutdir=(     [A]=a [B]=b [C]=c [D]=d )
declare -A Arroutport=(    [A]=a [B]=b [C]=c [D]=d )
declare -A Arroutctlpath=( [A]=a [B]=b [C]=c [D]=d )
declare -A Arrouttype=(    [A]=a [B]=b [C]=c [D]=d )
declare -A Arroutrun=(     [A]=a [B]=b [C]=c [D]=d )
declare -A Arroutstate=(   [A]=a [B]=b [C]=c [D]=d )
declare -A Arroutdrvmode=( [A]=a [B]=b [C]=c [D]=d )
declare -A Arroutdrvstate=([A]=a [B]=b [C]=c [D]=d )
# 
# 
for p in ${findstr} ${findled}
do
  echo -en "\r/"
# set -x
  # determine motortype
  basename="`basename $p`" 
  dirname="`dirname $p`" 
  # echo "Processing \"$p\" dir: $dirname base: $basename  "
  dir3="`basename ${dirname}`" # last-but-one node in path

  if stringcontains '::' "${basename}" ;  then # led-type 
  # echo "================== got :: in ${basename}"
    porttype1="${basename%%::*}" # double ::
    porttype2="${p#*::}"
    portname="${porttype2:0:4}"    
  else
    porttype1="${basename%%:*}"
    porttype2="${p#*:}"
    portname="`cat $p/port_name`"
  fi  
  #
  outportletter=${portname:3:1} # out%
  #
  driver_mode="`cat /sys/devices/platform/legoev3-ports/lego-port/port*/${portname}*/../mode`"
  set +e
  findinport "$portname"
  driver_status="`cat /sys/devices/platform/legoev3-ports/lego-port/${legoport}/status`"
  set -e
  #
  
  Arroutdrvmode[$outportletter]=${driver_mode}
 Arroutdrvstate[$outportletter]=${driver_status}
  haveportsout="$haveportsout $outportletter"
     Arroutbase[$outportletter]=${basename}
     
      Arroutdir[$outportletter]="/sys/devices/platform/legoev3-ports/lego-port/"${legoport}
     Arroutport[$outportletter]=${portname} # out%
 
  inlvl1=`echo $p`
  Arroutctlpath[$outportletter]=`echo -e ${green}${inlvl1}$brwhite`
  if   [ "${dir3}" == "dc-motor" ]; then
     Arrouttype[$outportletter]="dc-motor"
      Arroutrun[$outportletter]="`cat ${inlvl1}/duty_cycle`"
    Arroutstate[$outportletter]="`cat ${inlvl1}/command`" 
  elif [ "${dir3}" == "leds" ]; then
     Arrouttype[$outportletter]="led"
      Arroutrun[$outportletter]="`cat ${inlvl1}/brightness`"
      showtrigger "`cat ${inlvl1}/trigger`" 
    Arroutstate[$outportletter]="${currenttrigger}" 
  else
     Arrouttype[$outportletter]="`cat ${inlvl1}/type`"
      Arroutrun[$outportletter]="`cat ${inlvl1}/run`"
    Arroutstate[$outportletter]="`cat ${inlvl1}/state`" 
  fi  
  echo -en "\r\\"
done  

set +x
  echo -en " \r \r"
# take screenwidth into account:
scrwidth=`tput cols`
if [ $scrwidth -ge 130 ]; then

 # Report input ports:
 if [ "$haveportsin" != "" ]; then
   echo -e "\n$brblue  Input ports recognized:\n"
   printf "$brblue%4s %-10s %-10s %-14s %-4s %-11s %-25s %s\n$brwhite" "Port" "drv-mode" "drv-state" "sensor mode" "Poll" "fwVer" "Basename" "Control directory"
   
   for i in $haveportsin;  do
      printf     "%4s %-10s %-10s %-15s %-3s %-11s %-25s %s\n" "${Arrinport[$i]}"   " " " " "${Arrinsensormode[$i]}" "${Arrinpoll[$i]}" "${Arrinfw[$i]}" " " "${Arrinctlpath[$i]}" 
      printf     "%4s %-10s %-10s %-15s %-3s %-11s %-25s ${green}%-25s$brwhite\n\n" " " "${Arrindrvmode[$i]}" "${Arrindrvstate[$i]}"  " " " " " " "${Arrinbase[$i]}" "${Arrindir[$i]}"
   done
 fi

 # Report motorports:

 if [ "$haveportsout" != "" ]; then
   echo -e "\n$brblue output ports recognized:\n"
   printf "$brblue%4s %-10s %-10s %-15s %-3s %-11s %-25s %s\n$brwhite" "Port" "drv-mode" "drv-state" "Type" "Run" "State/Trig" "Basename" "Control directory"
   
   for i in $haveportsout;  do
     printf      "%4s %-10s %-10s %-15s %3s %-11s %-25s %s\n" "${Arroutport[$i]}" " " " " "${Arrouttype[$i]}" "${Arroutrun[$i]}" "${Arroutstate[$i]}"  "${Arroutbase[$i]}" "${Arroutctlpath[$i]}"
     printf      "%4s %-10s %-10s %-15s %3s %-11s %-25s ${green}%-25s$brwhite\n\n" " " "${Arroutdrvmode[$i]}" "${Arroutdrvstate[$i]}" " " " " " " " " "${Arroutdir[$i]}"
   done
 fi
 # width >= tgt-width
else

 # Report input ports:
 if [ "$haveportsin" != "" ]; then
   echo -e "\n$brblue  Input ports recognized:\n"
   printf "$brblue%4s %-10s %-10s %-14s %-4s %-11s %-25s   \n$brwhite" "Port" "drv-mode" "drv-state" "sensor mode" "Poll" "fwVer" "Basename"
   # "Control directory"
   
   for i in $haveportsin;  do
      printf     "%4s %-10s %-10s %-15s %-3s %-11s\n"                          "${Arrinport[$i]}" " " " " "${Arrinsensormode[$i]}" "${Arrinpoll[$i]}" "${Arrinfw[$i]}"
      printf     "%4s %-10s %-10s %-15s %-3s %-11s %-25s ${green}%s$brwhite\n" " " "${Arrindrvmode[$i]}" "${Arrindrvstate[$i]}"  " " " " " " "${Arrinbase[$i]}"
      printf     "Mod-ctl ${green}%s$brwhite\n" "${Arrindir[$i]}"
      printf     "Dev-ctl ${green}%s$brwhite\n\n" "${Arrinctlpath[$i]}" 
   done
 fi

 # Report motorports:

 if [ "$haveportsout" != "" ]; then
   echo -e "\n$brblue output ports recognized:\n"
   printf "$brblue%4s %-10s %-10s %-15s %-3s %-11s %-25s\n$brwhite" "Port" "drv-mode" "drv-state" "Type" "Run" "State/Trig" "Basename"
   # "Control directory"
   
   for i in $haveportsout;  do
     printf      "%4s %-10s %-10s %-15s %3s %-11s %-25s\n" "${Arroutport[$i]}" " " " " "${Arrouttype[$i]}" "${Arroutrun[$i]}" "${Arroutstate[$i]}"  "${Arroutbase[$i]}"
     printf      "%4s %-10s %-10s %-15s %3s %-11s %-25s\n" " " "${Arroutdrvmode[$i]}" "${Arroutdrvstate[$i]}" " " " " " " " "
     printf      "Mod-ctl     ${green}%-25s$brwhite\n" "${Arroutdir[$i]}"
     printf      "Dev-ctl     ${green}%-25s$brwhite\n\n" "${Arroutctlpath[$i]}"
   done
 fi
 # width <  tgt-width
fi